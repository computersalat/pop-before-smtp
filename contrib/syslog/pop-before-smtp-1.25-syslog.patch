--- pop-before-smtp.init~	Wed Sep 20 07:28:07 2000
+++ pop-before-smtp.init	Sat Nov 18 18:36:43 2000
@@ -4,7 +4,6 @@
 
 progname=pop-before-smtp
 pgm=/usr/sbin/$progname
-log=/var/log/$progname
 pid=/var/run/$progname.pid
 die(){ echo "$progname: $*">&2; exit 1; }
 
@@ -12,7 +11,7 @@
 
 case "$1" in
  start) echo -n Starting pop-before-smtp
-	$pgm --debug >$log 2>&1 & echo $! >$pid
+	$pgm & echo $! >$pid
 	echo_success; echo ''
 	;;
   stop) echo -n Stopping pop-before-smtp
--- pop-before-smtp-1.25	Wed Nov 15 12:57:55 2000
+++ pop-before-smtp	Sat Nov 18 18:29:42 2000
@@ -6,6 +6,13 @@
 # and asking for help.
 
 # pop-before-smtp 1.25 Bennett Todd <bet@rahul.net> Freely Redistributable
+
+#
+# Stig Hackvan <stig@hackvan.com> added support for syslog, set to not 
+# read entire logfile upon startup...just wipe the relay database and 
+# look for pop connections.
+#
+
 # 1.25 2000-11-15 Added commentary about DB_File prereq, from
 #                 Mike Saunders <method@method.cx>, as well as the
 #                 Solaris init script he fixed and tested.
@@ -248,6 +255,7 @@
 use Net::Netmask;
 use Date::Parse;
 use Getopt::Long;
+use Sys::Syslog;
 use Fcntl ':flock';
 
 ##################################
@@ -356,7 +364,7 @@
 	maxinterval => 10,
 	interval => 5,
 	adjustafter => 3,
-	tail => -1,
+	tail => 0,
 );
 
 # Daniel Roesen prefers this one; he feels that it does a better job
@@ -379,6 +387,23 @@
 #                              #
 ################################
 
+openlog ('pop-before-smtp', 'pid', 'mail');
+
+sub say_goodbye {
+  syslog('crit', "exiting on signal %s", $_[0]);
+  closelog();
+  exit(1);
+}
+$SIG{'INT'} = sub { say_goodbye('INT'); };
+$SIG{'TERM'} = sub { say_goodbye('TERM'); };
+
+$SIG{__DIE__} = sub { 
+  syslog('crit', "fatal error %s (%m)", $_[0]);
+  closelog();
+  # perl will perform the exit...
+};
+syslog('info','starting...');
+
 sub cleanup_nets {
 	my @r;
 	for (@_) {
@@ -419,19 +444,24 @@
 	my $ts = str2time($timestamp) or next;
 	$ts += $grace;
 	next if $ts < time;
-	print "read ts=$timestamp ip=$ipaddr\n" if $debug;
+	syslog('debug', "read ts=$timestamp ip=$ipaddr") if $debug;
 	next if findNetblock($ipaddr);
-	print "\taccepted --- not in mynetworks\n" if $debug;
+	syslog('debug', "accepted $ipaddr --- not in mynetworks") if $debug;
 	push @q, [$ipaddr, $ts];
 	my $already_enabled = exists($t{$ipaddr});
 	$t{$ipaddr} = $ts;
 	next if $already_enabled;
+	syslog('info', "opening relay for $ipaddr --- not in mynetworks");
 	flock(DB_FH, LOCK_EX) or die "$0: flock LOCK_EX failed: $!\n" if $flock;
 	$db{$ipaddr} = "ok" if $write;
 	print "\twritten ok\n" if $write and $debug;
 	while ($q[0][1] < time) {
 		if ($q[0][1] == $t{$q[0][0]}) {
-			print "purging ts=".localtime($q[0][1])." ip=$q[0][0]\n" if $debug;
+			syslog('info', "closing relay for $q[0][0]".
+				       ($debug? 
+                                        " (ts=".localtime($q[0][1]).")" : 
+        				"")
+				);
 			delete $t{$q[0][0]};
 			delete $db{$q[0][0]} if $write;
 		}
